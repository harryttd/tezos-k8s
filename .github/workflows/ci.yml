name: CI

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*.*.*"
  pull_request:
  release:
    types: [created]

jobs:
  # check-lint-and-format:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./mkchain
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Python 3.9
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: 3.9

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install black isort==5.7.0 autoflake

  #     - name: Remove unused imports
  #       run: |
  #         # one run to output unused imports, another run for exit code
  #         autoflake . -r --remove-all-unused-imports
  #         autoflake . -r --remove-all-unused-imports -c

  #     - name: Sort imports
  #       run: isort . --check --diff

  #     - name: black
  #       run: black . --check

  # test:
  #   runs-on: ${{ matrix.os }}
  #   needs: check-lint-and-format
  #   defaults:
  #     run:
  #       working-directory: ./mkchain
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: [3.6, 3.7, 3.8, 3.9]
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pyyaml kubernetes
  #         pip install pytest

  #     - name: Build Python package
  #       run: pip install .

  #     - name: pytest
  #       run: pytest tests

  # publish_mkchain:
  #   # needs: test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     # after we test that the module works on all systems we only need to build one since this is a pure python module
  #     matrix:
  #       python-version: [3.8]
  #       os: [ubuntu-latest]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pyyaml
  #         pip install wheel

  #     - name: Build Python package
  #       run: python setup.py bdist_wheel
  #       working-directory: mkchain

  #     - name: Install wheels
  #       run: pip install dist/*.whl
  #       working-directory: mkchain

  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       # if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
  #       with:
  #         files: "**/mkchain/dist/*.whl"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Publish package to PyPI
      #   if: github.event_name == 'release' && github.event.action == 'created'
      #   uses: pypa/gh-action-pypi-publish@master
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_TOKEN }}

  # list_containers_to_publish:
  #   # based on
  #   # https://stackoverflow.com/a/62953566/207209
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.event_name == 'release' && github.event.action == 'created'
  #   outputs:
  #     matrix: ${{ steps.gen-containers-matrix.outputs.matrix }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - id: gen-containers-matrix
  #       run: |
  #         container_list=$(jq -c -n --arg cont "$(find -name 'Dockerfile' -printf '%h\n' | sort -u | sed 's/.\///')" '{ container: $cont | split("\n")}')
  #         echo "Dynamically generated container list based on subdirectories of the docker directory. The following list will be passed to next build step:"
  #         echo $container_list
  #         echo "::set-output name=matrix::$container_list"

  # publish_containers:
  #   # based on
  #   # https://github.com/docker/build-push-action#usage
  #   runs-on: ubuntu-latest
  #   needs: list_containers_to_publish
  #   if: github.event_name == 'release' && github.event.action == 'created'
  #   strategy:
  #     matrix: ${{fromJson(needs.list_containers_to_publish.outputs.matrix)}}

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Create docker hub ${{ matrix.container }} repo if not exists
  #       # requires a github username and password rather than a token, unfortunately
  #       # https://github.com/docker/hub-feedback/issues/1914
  #       run: |
  #         USER=${{ secrets.DOCKERHUB_USERNAME }}
  #         PASS=${{ secrets.DOCKERHUB_PASSWORD }}
  #         TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${USER}'", "password": "'${PASS}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)

  #         curl -s -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/" \
  #         --data 'description="tezos-k8s ${{ matrix.container }}"' \
  #         --data 'full_description="The container for https://github.com/tqtezos/tezos-k8s/tree/master/${{ matrix.container }}' \
  #         --data 'is_private=false' \
  #         --data 'name=tezos-k8s-${{ matrix.container }}' \
  #         --data "namespace=tqtezos" || true

  #     - name: Docker meta
  #       id: docker_meta
  #       uses: crazy-max/ghaction-docker-meta@v1
  #       with:
  #         images: tqtezos/tezos-k8s-${{ matrix.container }}
  #         tag-sha: true

  #     - name: Publish ${{ matrix.container }} container to Docker Hub
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ${{ matrix.container }}/.
  #         file: ${{ matrix.container }}/Dockerfile
  #         push: true
  #         tags: ${{ steps.docker_meta.outputs.tags }}
  #         labels: ${{ steps.docker_meta.outputs.labels }}

  # lint_helm_charts:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up Helm
  #       uses: azure/setup-helm@v1
  #       with:
  #         version: v3.4.2

  #     - name: Lint Helm Charts
  #       run: helm lint charts/*

  publish_helm_charts:
    runs-on: ubuntu-latest
    # needs: [lint_helm_charts, publish_containers]
    # needs: [lint_helm_charts]
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          # path: main

      - name: Configure Git
        # working-directory: main
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.2

      - name: Install yq
        run: |
          sudo wget -q https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Get Release Version
        id: get_release_version
        run: echo "::set-output name=RELEASE_VERSION::${GITHUB_REF/refs\/tags\//}"

      - name: Set Helm Chart and Image Versions
        run: |
          RELEASE_VERSION=${{ steps.get_release_version.outputs.RELEASE_VERSION }}

          for chart in charts/*; do
            [[ ! -d "$chart" ]] && continue
            echo $chart

            # Update Chart.yaml with release version
            yq e ".version = \"$RELEASE_VERSION\"" -i "$chart/Chart.yaml"

            # Get tqtezos/tezos-k8s images specified in values.yaml
            tq_images=$(yq e '(.images[] | select(. == "tezos-k8s*")) | path | .[-1]' "$chart/values.yaml")
            # Update the release version of each of tezos-k8s images
            for image in $tq_images; do
              image_name=$(yq e ".images.$image" $chart/values.yaml | sed -E "s/tezos-k8s-(.*):.*/\1/")
              yq e ".images.$image = \"tqtezos/tezos-k8s-$image_name:$RELEASE_VERSION\"" -i $chart/values.yaml
            done
          done

      # - name: cat
      #   run: |
      #     for chart in charts/*; do
      #       [[ ! -d "$chart" ]] && continue
      #       echo "CHART: $chart"
      #       cat $chart/Chart.yaml
      #       echo "VALUES: $chart"
      #       head -n 20 $chart/values.yaml
      #       if [[ -f "$chart/Chart.lock" ]]; then
      #         echo "LOCK: $chart"
      #         cat $chart/Chart.lock
      #       fi
      #     done

      # - name: Get Release Branch Name
      #   id: get_branch_name
      #   run: |
      #     raw=$(git branch -r --contains ${GITHUB_REF})
      #     branch=${raw##*origin\/}
      #     echo "Branch: $branch"
      #     echo "::set-output name=BRANCH::$branch"

      # - name: Commit Chart Changes to Branch
      #   run: |
      #     RELEASE_VERSION=${{ steps.get_release_version.outputs.RELEASE_VERSION }}
      #     git commit --all -m "Update Helm Chart Versions to $RELEASE_VERSION"
      #     COMMIT_HASH=$(git rev-parse --short HEAD)
      #     git tag -af -m "Tag commit" $RELEASE_VERSION $COMMIT_HASH
      #     git push origin "HEAD:${{ steps.get_branch_name.outputs.BRANCH }}"
      #     git push -f origin "HEAD:${{ steps.get_branch_name.outputs.BRANCH }}" $RELEASE_VERSION

      # - name: Publish Helm charts
      #   uses: stefanprodan/helm-gh-pages@master
      #   with:
      #     linting: off # We already linted in a job before
      #     token: ${{ secrets.CI_GITHUB_TOKEN }}
      #     branch: main
      #     owner: harryttd
      #     repository: tezos-helm-charts
          # app_version: ${{ steps.get_release_version.outputs.RELEASE_VERSION }}
          # chart_version: ${{ steps.get_release_version.outputs.RELEASE_VERSION }}

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.1.0
        env:
          CR_TOKEN: "${{ secrets.CI_GITHUB_TOKEN }}"
          charts_repo_url: https://harryttd.github.io/tezos-helm-charts


      - name: cat2
        run: |
          for chart in charts/*; do
            [[ ! -d "$chart" ]] && continue
            if [[ -f "$chart/Chart.lock" ]]; then
              echo "LOCK: $chart"
              cat $chart/Chart.lock
            fi
          done
